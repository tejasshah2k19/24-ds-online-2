DS -> time complexity  -> diff diff input 
      space complexity -> total space

int a;float b;double d;// 


time complexity ->

    #define S 10 
   
    int key = 10 ;

    int a[]={1,2,3,4,5,6,7,8,9,0};

    for(i=0;i<S;i++){//0 1 2 3 4 5 6 7 8 9      
        if(a[i] == key){
            break;
        }
    }

    key = 1  -> 1 : best 
    key = 5  -> 5 
    key = 7  -> 7 
    key = 10 -> 10 
    key = 100 -> 10 : worst 



Best Case : 1  
Avg Case  : base + worst / 2 
Worst Case : 10 

------------------------------------------------------

complexity -> notation 

1) Theta  : Average  : 
2) Omega  : Best     : LowerBound 
3) BigO  O: Worst : UpperBound 


BigO ->  
------------------------------------------------------

#define S 20 

int key=10;
int a[]={1,2,3,4,5,6,7,8,9,0} ;

for(int i=0;i<S;i=i+1){// 
    if(a[i] == key){
        break; 
    }
}
10 
20
30

BigO(n)-> 




#define S 10 

int key=10;
int a[]={1,2,3,4,5,6,7,8,9,0} ;

for(int i=0;i<S;i=i+2){// 
    if(a[i] == key || a[i+1] == key){
        break; 
    }
}


 
------------------------------------------------------

int a; // bytes ? 4 byte 
a = 10  // 

pf(a)  10 

a = 20 

pf(a) ??  //20


variable can hold single value at a time :- 


addition of two numbers :- 
2 

addition of five numbers :- 
5

addition of ten numbers :- 
10 


addition of hunderd numbers :- 
100

? ----> array -> single -> n numbers items  

array -> collection of same type of data 

single variable -> hold n numbers of value 

int a;//4 byte  

int a[5];//array --> 20byte   

1st copy - 1st element ? index::subscript

1st element ----> 0th index 

index -> starts with 0 , ends with SIZE-1 

memory allocation ----> 



----------------------------------------------
Array:->

1. Insert 
2. Remove 
3. Display
4. Exit 


valid / inValid 

input : ()()  -> valid 
input : ([])  -> valid 
input : ({[})]-> inValid 


----------------------------------------------

DS -> Linear -> Stack -> LiFo -> Last In First Out

1)whatsapp	10
	10.15
	10.3
	
2)mail - inbox	

3)call logs	
  history	
	
4)photo gallery	
	
5)ctrl + z	
  undo	
	
6)recently used app	

-------------------------------------------------------


________________ function is used to insert data in stack ? 
PUSH()

________________ function is used to remove data in stack ? 
POP()


_________________ pointer we used to manage stack  ?
top 

Stack follows _____LIFO_______ mechanism ?


which condition is used to check stack is full ?
top == SIZE-1 


How to check stack is empty?
top == -1  

------------------------------------------------------------


M 
F 

character -> data type -> 

char x; //single character 
    //royal -> we can not store 

char x[10]; //character array -> string  
    //royal -> we can store 

multiple characters -> character array -> string

    char x[30];//2 
    //royaleducation ?
    //royal ->

    //5 : 25 

    //royal 



    %c -> single character
    %s -> characters : string 
    

    -------------------------------------------------------

    5 num -> sum 
    15 
    25 

    array -> collection of items - same type of data type 

    structure ->  collection of items - diff type of data type 

            movie -> 
            name -> char[30] 
            year -> int 
            lang -> char[30]


  struct tagName{

  };

  struct movie{
        char name[30];
        int year; 
        char lang[30];
  };

--------------------------------------------------------------------------
Stack -> mechanism ? LiFo 
            Last In First Out 

            whatsapp messages 
            call history 
            gallery 

    -> element / data -> add -> PUSH 
    -> element / data -> remove -> POP 

    top of the element ===>  PEEK

    pointer-> TOP 

---------------------------------------------------------------------------

FiFo -> First In First Out 
Queue -> 

Line -> Queue -> 
Ecommerce Buy -> 
Printer print -> 

----------------------------------------------------------------

str => 
[][][[][]]
    valid 

{{{{}}}}
    valid 

{({})}
    valid 
({{})}
    inValid 

{{[]]{}}}
    inValid 

STACK 
    char -> 
----------------------------------------------------------------


variable -> is used to store value 
pointer variable -> is used to store memory address of another variable 


int a = 10; // variable 

int *p; //pointer variable 

p = &a; 


printf(" %d ",a); //10  
printf(" %d ",p); //1200 

printf(" %d ",&p); //  address of p =>1500 
printf(" %d ",*p); //  value at p => 10


----------------------------------------------------------------
1:4 byte 
1000: 4*1000 => 4000 byte 
SMA-> static memory allocation -> implicit 
int a;//4 byte implicit 
int x[10]; // 4 : 6 
           // 12 : -2
//
//
//
//

// no need




end of program 


DMA -> dynamic memory allocation --> 

allocation -> calloc() , malloc() 
deAlloction : release -> free() 
resize : realloc()

stdlib.h

---------------------------------------------------------------------

calloc vs malloc 

int a; ---> 4 : single block : malloc 

int a[5]; --> 20  4:5 block => 20 block : calloc 

----------------------------------------------------------------------

struct student 
   id //s
   name //s 
   maths//s 
   sci//s 
   eng//s 
   perc//d 
   grade//d  


----------------------------------------------------------------------
struct ? 

struct student{

    char name[20];
    int maths;
    int sci;
};
 

struct student s[50];

malloc 
1
2
3
4
5
6
7
8
9

dynamic list -> 

linked list -> 


data -> node 


linked list -> node 

        node -> data | next 
        data -> store information
        next -> address of next node 


1) single linked list 
2) double linked list 
3) circular linked list 



single linked list -> 
    self referential structure --> 
    *pointer 
    
--------------------------------

dynamic list -> 
        when you want you will allocate memory -> 


double linked list ---> 

        node :  1) data 
                2) next 
                3) previous 

------------------------------------------------


struct User{
    name email password 
    accountName balance 
    Expense exp*; 
    User *next;
}

struct Expense{
    title 
    amount
}


1 For Signup
2 For Login
3 For Exit
Enter your choice: 1

Enter First Name: ram
Enter Email: ram@gmail.com
Enter Password: ram

Signup Successful!

1 For Signup
2 For Login
3 For Exit
Enter your choice: 1

Enter First Name: laxman
Enter Email: laxman@gmail.com
Enter Password: laxman

Signup Successful!

1 For Signup
2 For Login
3 For Exit
Enter your choice: 2

Enter Email: ram
Enter Password: ram

Invalid Email or Password!

1 For Signup
2 For Login
3 For Exit
Enter your choice: 2

Enter Email: ram
Enter Password: ram

Invalid Email or Password!

1 For Signup
2 For Login
3 For Exit
Enter your choice: 2

Enter Email: ram@gmail.com
Enter Password: ram

Login Successful! Welcome, ram

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 0

Enter Account Name: Cash
Enter Initial Balance: 25000

Account Created Successfully with 25000 amount !

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 1

Enter Expense Title: Recharge
Enter Expense Amount: 2000

Expense Added Successfully!

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 1

Enter Expense Title: party
Enter Expense Amount: 2000

Expense Added Successfully!

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 3

Current Balance: Γé╣ 21000

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 2

===================================
        Expense List
===================================
| No  | Title                | Amount     |
-----------------------------------
| 1   | party                | Γé╣2000 |
| 2   | Recharge             | Γé╣2000 |
===================================

0. Add Account
1. Add Expense
2. List Expenses
3. Check Balance
4. Logout
Enter your choice: 4

Logging Out...

1 For Signup
2 For Login
3 For Exit
Enter your choice: 3

Exiting Program...



-------------------------------------------------------------------------

NoN Linear DataStructure -> 

Tree ->


